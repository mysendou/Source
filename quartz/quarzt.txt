什么是Quartz?
	Quartz是一个功能丰富的开源作业调度库，可以集成到任何Java应用程序中,从最小的独立应用程序到最大的电子商务系统。Quartz可以用来创建简单或复杂的计划来执行十次,甚至数百次,甚至数以万计的工作. 作业的任务被定义为标准Java组件,你可以通过编程让他们做任何你想做的事。Quartz Scheduler包括许多企业级功能,例如支持JTA事务和集群。
Quartz 可以为我们做什么？
	假如你的应用程序需要在特定的时间执行某件事情,或者你的系统有重复的维护作业，那么Quartz可能是您的理想解决方案。
	有几个简单的例子：
		1. 淘宝的自动确认收货：当卖家已经将商品通过快递公司发货了，那么JOB 会在两周后检查这个订单的状态是否为确认收货，如果不是会自动的进行签收。
		2. 系统维护：计划作业以在每个工作日（所有工作日，节假日除外）在11:30 PM将数据库内容转储为XML文件。
Quartz 运行的环境
	Quartz可以嵌入在另一个独立应用程序中运行
	Quartz可以在应用程序服务器（或servlet容器）中实例化，并参与XA事务
	Quartz可以作为独立的程序运行（在自己的Java虚拟机中），通过使用RMI
	Quartz可以实例化为一组独立程序（具有负载平衡和故障转移功能），用于执行作业
JOB Scheduling
	JOB 可以由创建者指定名称,也可以添加到指定组中。Triggers 也可以被给定名称并且被放入组中,以便容易地在调度器内组织它们。JOB 可以添加到 Schedule 程序一次, 但是注册了多个触发器。在企业Java环境中，Jobs可以作为分布式（XA）事务的一部分来执行其工作。
JOB 执行
	JOB 可以是实现简单作业的任何Java类，为作业的执行工作留下无限可能性。
	Job类实例可以由Quartz或应用程序的框架实例化。
	当触发器发生时，调度程序会通知零个或多个实现了JobListener和TriggerListener接口的Java对象（监听器可以是简单的Java对象，EJB或JMS等。这些侦听器也在 JOB 执行后通知。
	JOB 完成后，它们返回一个JobCompletionCode，通知调度程序成功或失败。JobCompletionCode还可以指示调度程序根据成功/失败代码应该采取的任何操作，例如立即重新执行 JOB。
Job Persistence(持久化)
	Quartz的设计包括一个JobStore接口，可以实现它以提供用于存储作业的各种机制。
	使用包含的 JDBCJobStore，配置为“non-volatile”的所有 JOB 和触发器都通过JDBC存储在关系数据库中。
	使用附带的RAMJobStore，所有 JOB 和触发器都存储在RAM中，因此不会在程序执行之间持续存在 - 但这具有不需要外部数据库的优点。
Transactions
	Quartz 可以通过使用 JobStoreCMT(JDBCJobStore的子类)参与JTA事务。
	Quartz 可以管理一个 Job 的执行周围的 JTA 事务(开始和提交它们),以使 Job 执行的工作自动发生在JTA事务中。