规则的编译与运行
    在Drools当中,规则的编译与运行要通过Drools提供的各种API来实现,这些API总体来讲可以分为三类：
    规则编译、规则收集和规则的执行。完成这些工作的API主要有KnowledgeBuilder、KnowledgeBase、StatefulKnowledgeSession、StatelessKnowledgeSession等，
    它们起到了对规则文件进行收集、编译、查错、插入fact、设置global、执行规则或规则流等作用,
    在正式接触各种类型的规则文件编写方式及语法讲解之前，我们有必要先熟悉一下这些API的基本含义及使用方法。

KnowledgeBuilderFactory
    此工厂用于构建在KnowledgePackages中集体保存的知识库资源。KnowledgePackage还提供了“命名空间”的作用>
    可以提供一个可选的KnowlegeBuilderConfiguration,KnowledgeBuilderConfiguration本身是从这个工厂创建的。
    KnowledgeBuilderConfiguration允许您设置要与其他设置一起使用的ClassLoader,如默认方言和编译器，以及许多其他选项。

KnowledgeBuilder
    KnowledgeBuilder负责获取源文件，例如.drl文件，.bpmn2文件或.xls文件，并将其转换为KnowledgeBase可以使用的规则和流程定义的KnowledgePackage.
    它使用ResourceType枚举来告诉它要求构建的资源的类型。
    KnowledgeBuilder在编译规则的时候可以通过其提供的hasErrors()方法得到编译规则过程中发现规则是否有错误,
    如果有的话通过其提供的getErrors()方法将错误打印出来,以帮助我们找到规则当中的错误信息。如果有错误,getKnowledgePackages()将返回一个空列表

KnowledgeBaseFactory
    这个工厂将创建并返回一个KnowledgeBase实例,可以提供一个可选的KnowledgeBaseConfiguration。
    KnowledgeBaseConfiguration本身也是从这个工厂创建的。

StatefulKnowledgeSession
    StatefulKnowledgeSession对象是一种最常使用的与规则引擎进行交互的方式,它可以与规则引擎建立一个持续的交互通道,
    在推理计算的过程当中可能会多次触发同一数据集.在最后使用完StatefulKnowledgeSession对象之后，一定要调用其dispose()方法对资源进行释放。
    可以从外部接受一个业务的对象,也叫fact,一个fact对象通常是一个简单的Java的POJO,一般它们会有若干个属性,每一个属性都会对应getter和setter方法，用来对外提供数据的设置与访问。
    一般来说,在Drools规则引擎当中,fact所承担的作用就是将规则当中要用到的业务数据从应用程序当中传入进来,对于规则当中产生的数据及状态的变化通常不用fact传出.
    如果在规则当中需要有数据传出,那么可以通过在StatefulKnowledgeSession当中设置global对象来实现,一个global对象也是一个普通的Java对象,在向StatefulKnowledgeSession当中设置global对象时不用insert方法而用setGlobal方法实现.

StatelessKnowledgeSession 
   StatelessKnowledgeSession的作用与StatefulKnowledgeSession差不多,它们都是用来接收业务数据、执行规则的。
   实际上,StatelessKnowledgeSession对StatefulKnowledgeSession进行了包装,使得在使用StatelessKnowledgeSession对象时不需要再调用dispose()方法释放内存资源了在使用StatelessKnowledgeSession时不能进行重复插入fact的操作、也不能重复的调用fireAllRules()方法来执行所有的规则,
   对应这些要完成的工作在StatelessKnowledgeSession当中只有execute(…)方法，通过这个方法可以实现插入所有的fact并且可以同时执行所有的规则或规则流，事实上也就是在执行execute(…)方法的时候就在StatelessKnowledgeSession内部执行了insert()方法、fireAllRules()方法和dispose()方法。
   
fact 对象
      在drools中我们可以传入一个普通的java对象,这个对象我们称作fact对象,这时候规则中保存的是该对象的引用因此在规则中我们可以任意的对其进行读写操作,
      这个对象一般是包含set/get方法的POJO对象。当一个fact对象插入到workingMemory中,会立即的与所有的规则进行匹配。
      StatefulKnowledgeSession提供了insert方法插入fact对象。StatelessKnowledgeSession可以使用CommandFactory进行插入。
=============================================================================
规则文件
    规则文件是以drl结尾的文件，结构一般如下所示：
    package package-name
    imports
    globals
    functions
    queries
    rules
    注意package必须在文件的第一行
规则语言：
    rule "name"
        attributes
        when 
            LHS 如果没有的话默认为eval(true)，可以为多个条件
        then 
            RHS
    end